name: "01_Foundation"

on:
  workflow_dispatch:
  #push:
  #  branches:
  #    - master
  pull_request:

jobs:
  build-plan:
    name: "01_Foundation_Plan"
    runs-on: ubuntu-latest

    # Set the working directory to main for the config files
    defaults:
      run:
        shell: bash
        working-directory: 01_Foundation

    env:
      TF_VERSION: latest
      TF_STATE_NAME: 01_Foundation.tfstate

      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
      STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
      CONTAINER_NAME: ghdeploytfstate

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "${{ env.TF_VERSION }}"

      - name: Terraform Format
        id: fmt
        run: terraform fmt --check

      - name: Terraform Init
        id: init
        #env:
        #  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        #  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        #  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        #  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        #  RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
        #  STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
        #  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        run: terraform init --backend-config="storage_account_name=$STORAGE_ACCOUNT" --backend-config="container_name=$CONTAINER_NAME" --backend-config="resource_group_name=$RESOURCE_GROUP" --backend-config="key=$TF_STATE_NAME"
      
      - name: Terraform Validate
        id: validate
        run: terraform validate --no-color

      - name: Terraform Plan
        id: plan
        #env:
        #  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        #  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        #  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        #  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        if: github.event_name == 'pull_request'
        run: terraform plan --var-file=./config.tf.tfvars --out=./plan.tfplan -no-color
        continue-on-error: true

      - name: add-plan-comment
        id: comment
        uses: actions/github-script@v3
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: 01_Foundation
          path: ./plan.tfplan
          retention-days: 5

 #     - name: Terraform Apply
 #       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
 #       run: terraform apply -auto-approve