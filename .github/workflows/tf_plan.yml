name: "Build_TF_Plan"

on:
  workflow_call:
    inputs:
      tf_version:
        description: 'Specifies version of Terraform to use. Default=latest.'
        required: false
        type: string
        default: latest
      tf_state_name:
        description: 'Specifies the Terraform state file name for this plan.'
        required: true
        type: string
      tf_container_name:
        description: 'Specifies the Azure Storage account container where backend Terraform state is hosted.'
        required: true
        type: string
      environment:
        description: 'Specifies the deployment environment.'
        required: true
        type: string
    secrets:
      arm_client_id:
        description: 'Specifies the Azure ARM CLIENT ID.'
        required: true
      arm_client_secret:
        description: 'Specifies the Azure ARM CLIENT SECRET.'
        required: true
      arm_subscription_id:
        description: 'Specifies the Azure ARM SUBSCRIPTION ID.'
        required: true
      arm_tenant_id:
        description: 'Specifies the Azure ARM TENANT ID.'
        required: true
      resource_group:
        description: 'Specifies the Azure Resource Group where the backend storage account is hosted.'
        required: true
      storage_account:
        description: 'Specifies the Azure Storage Account where the backend state is hosted.'
        required: true

jobs:
  build-plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "${{ inputs.TF_VERSION }}"

      - name: Terraform Format
        id: fmt
        run: terraform fmt --check

      - name: Terraform Init
        id: init
        run: terraform init --backend-config="storage_account_name=$STORAGE_ACCOUNT" --backend-config="container_name=$CONTAINER_NAME" --backend-config="resource_group_name=$RESOURCE_GROUP" --backend-config="key=$TF_STATE_NAME.tfstate"
      
      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        #if: github.event_name == 'pull_request'
        run: terraform plan --var-file=config.tf.tfvars --out=plan.tfplan
        continue-on-error: true

#      - name: add-plan-comment
#        id: comment
#        uses: actions/github-script@v3
        #if: github.event_name == 'pull_request'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        
#            <details><summary>Show Plan</summary>
            
#            \`\`\`${process.env.PLAN}\`\`\`
            
#            </details>
            
#            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
 #           github.issues.createComment({
  #            issue_number: context.issue.number,
   #           owner: context.repo.owner,
    #          repo: context.repo.repo,
     #         body: output
      #      })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: "${{ inputs.tf_state_name  }}""
          path: "${{ inputs.tf_state_name  }}/plan.tfplan"
          retention-days: 5

 #     - name: Terraform Apply
 #       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
 #       run: terraform apply -auto-approve